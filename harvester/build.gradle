buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_springBoot}"
        classpath "com.sourcemuse.gradle.plugin:gradle-mongo-plugin:${version_mongo_plugin}"
        classpath "se.transmode.gradle:gradle-docker:${version_gradleDocker}"
    }

}

apply plugin: 'spring-boot'
apply plugin: 'mongo'
apply plugin: 'docker'

dependencies {
    compile (
            'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-data-mongodb'
    )

    testCompile (
            'org.springframework.boot:spring-boot-starter-test'
    )
}

bootRepackage {
    mainClass = 'com.github.reflectoring.infiniboard.harvester.HarvesterApplication'
    executable = true
}

task integrationTest(type: Test) {
    runWithMongoDb = true // activates mongo plugin to start embedded MongoDB
    useJUnit {
        includeCategories project.MongoIntegrationTests
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    tagVersion = 'latest'
    tag = "${project.dockerGroup}/${jar.baseName}"

    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from("${project.buildDir}/libs/") {
                rename "${jar.baseName}-.*\\.jar", "${jar.baseName}.jar"
            }
            into stageDir
            exclude '*.original'
        }
    }
}
