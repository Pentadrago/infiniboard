apply plugin: 'spring-boot'
apply plugin: 'docker'

buildscript {

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_springBoot}"
        classpath "org.springframework:springloaded:${version_springLoaded}"
    }
}

jar {
    baseName = 'quartermaster'
    version = '0.0.1'
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'

    compile('org.springframework.boot:spring-boot-starter-data-mongodb')

    // disable embedded mongo
    // ./gradlew -Pno_embedded_mongo ...
    if (!project.hasProperty('no_embedded_mongo')) {
        testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.2')
    }

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

bootRepackage {
    mainClass = 'com.github.reflectoring.InfiniboardApplication'
    executable = true
}

bootRun {
    // default application configuration for running application via bootRun in development mode
    // (in production, these properties are defined in application.properties)
    jvmArgs '-Xdebug',
            '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9009',
            '-Dserver.port=8080'
}

task cleanWebappDir(type: Delete) {
    delete 'src/main/webapp'
}


task copyClient(type: Copy) {
    from '../infiniboard-app/build'
    into 'src/main/webapp'
}

// infiniboard-app must be build first
processResources.dependsOn ":infiniboard-app:npmInstall"

// clean should also clean webapp dir
clean.dependsOn cleanWebappDir

// clean old webapp first
copyClient.dependsOn cleanWebappDir

// processResources copies the client to webapp dir
processResources.dependsOn copyClient

task buildDocker(type: Docker, dependsOn: build) {
//  push = true
    tagVersion = project.version
    tag = "${project.dockerGroup}/${jar.baseName}"

    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from("${project.buildDir}/libs/") {
                rename "${jar.baseName}-.*\\.jar", "${jar.baseName}.jar"
            }
            into stageDir
        }
    }
}
