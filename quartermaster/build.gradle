buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_springBoot}"
        classpath "org.springframework:springloaded:${version_springLoaded}"
        classpath "se.transmode.gradle:gradle-docker:${version_gradleDocker}"
    }
}

apply plugin: 'spring-boot'
apply plugin: 'mongo'
apply plugin: 'docker'
apply plugin: 'war'

configurations {
    providedRuntime
}

dependencies {
    compile (
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-data-mongodb'
    )

    providedRuntime(
            "org.springframework.boot:spring-boot-starter-tomcat"
    )

    testCompile (
            'org.springframework.boot:spring-boot-starter-test',
    )
}

task integrationTest(type: Test) {
    runWithMongoDb = true // activates mongo plugin to start embedded MongoDB
    useJUnit {
        includeCategories project.MongoIntegrationTests
    }
}

bootRepackage {
    mainClass = 'com.github.reflectoring.InfiniboardApplication'
    executable = true
}

bootRun {
    // default application configuration for running application via bootRun in development mode
    // (in production, these properties are defined in application.properties)
    jvmArgs '-Xdebug',
            '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9009',
            '-Dserver.port=8080'
}

task cleanWebappDir(type: Delete) {
    delete 'src/main/webapp'
}


task copyClient(type: Copy) {
    from '../infiniboard-app/build'
    into 'src/main/webapp'
}

// infiniboard-app must be build first
processResources.dependsOn ":infiniboard-app:npmInstall"

// clean should also clean webapp dir
clean.dependsOn cleanWebappDir

// clean old webapp first
copyClient.dependsOn cleanWebappDir

// processResources copies the client to webapp dir
processResources.dependsOn copyClient

task buildDocker(type: Docker, dependsOn: build) {
//  push = true
    tagVersion = project.version
    tag = "${project.dockerGroup}/${war.baseName}"

    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from("${project.buildDir}/libs/") {
                rename "${war.baseName}-.*\\.war", "${war.baseName}.war"
            }
            into stageDir
            exclude '*.original'
        }
    }
}